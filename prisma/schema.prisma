// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id  Int @id @default(autoincrement())
  firstName  String
  lastName  String
  email  String @unique
  subId  String
  stripeId  String? @unique
  address Address[]
  order Order[]
  payment Payment[]
  cart Cart[]
  wishlist Wishlist[]
  feedback Feedback[]
  @@map("customers")
}

model Address {
  id  Int   @id @default(autoincrement())
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
  street String
  city String
  province String
  country String
  postal String
  phone String
  billing Boolean
  @@map("addresses")
}

model Product {
  id        Int      @id @default(autoincrement())
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  name      String
  artist    String
  country   String
  dimensions String
  price     Decimal
  stock     Int
  image     String
  description String
  cartItem CartItem[]
  orderItem OrderItem[]
  wishlists Wishlist[]
  feedback Feedback[]
  discount Discount[]
  @@map("products")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  products  Product[]
  @@map("categories")
}

model Order {
  id        Int      @id @default(autoincrement())
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId Int
  orderDate DateTime
  totalPrice Decimal
  orderStatus String?
  orderItem OrderItem[]
  @@map("orders")
}

model Payment {
  id        Int      @id @default(autoincrement())
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
  date DateTime
  totalPrice Decimal
  stripeChargeId String
  Order Order[]
  @@map("payments")
}

model Cart {
  id          Int       @id @default(autoincrement())
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  Int
  cartItems   CartItem[] // Establish a one-to-many relationship with CartItem
  @@map("carts")
}

model CartItem {
  id         Int       @id @default(autoincrement())
  cart       Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     Int
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  qty        Int
  @@map("cart_items")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  qty Int
  price Decimal
  @@map("order_items")
}


model Wishlist {
  id        Int      @id @default(autoincrement())
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  @@map("wishlists")
}


model Feedback {
  id        Int      @id @default(autoincrement())
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  rating Int
  comment String
  date DateTime?
  @@map("feedback")
}


model Discount {
  id        Int      @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  discount Int
  startDate DateTime
  endDate DateTime
  description String
  @@map("discounts")
}


model Admin {
  id        Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  email     String @unique
  subId   String
  @@map("admins")
}